// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(255)
  description String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int      @unique
}

model Interest {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  description   String         @db.VarChar(255)
  UserInterests UserInterests?
}

model UserInterests {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique()
  interests  Interest @relation(fields: [interestId], references: [id])
  interestId Int      @unique()
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  username      String?        @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  profile       Profile?
  Auth          Auth?
  UserInterests UserInterests?
  accounts      Account?
  sessions      Session?
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int      @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auth {
  id                Int    @id @default(autoincrement())
  password          String @db.VarChar(255)
  user              User   @relation(fields: [userId], references: [id])
  userId            Int    @unique
  defaultPassString String @default(uuid())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
